Summary
-------

This daemon ensures that users connected to your linux wifi access point or to
your linux managed switch only use the ip address they have been assigned by
your local dhcp server.

To achieve this, it manages linux ebtables rules that accept packets that match
ip address, mac address and interface with an active dhcp lease. It will also
listen to dhcp requests and replies using ebtables, so you can filter which
dhcp servers should be listened too. The latter is called nflog.

When running on wifi access points, stations roaming between them will not
renew their lease after each single roam. Instead, the target access point
will have to learn the active lease from the originating access point. This
currently is achieved by storing the leases in a central mysql/mariadb database
and udp broadcast notifications. Detecting new (roaming) stations is based on
linux bridge code and thus does not depend on wifi interfaces.

Commercial switches usually name similar features ARPprotect or DHCPsnooping.

General
-------

This daemon parses dhcp ack and request messages and inserts ebtables ACCEPT
matching source IPv4 address + source MAC rules into the dhcpsnooping chain for
all authenticated stations. These rules get removed once the lease times out.
The packets are fed into the daemon using netfilter log (nflog),
the default group id is 1.

To use this daemon, you'll need to have
  - NETFILTER_LOG support in the kernel
  - an ebtables rule copying all dhcp request from local stations (i.e. on wlan+)
    to the daemon using the nflog matcher.
  - an ebtables rule copying all dhcp acks from the authoritative dhcp servers
    (i.e. from ! wlan+) to the daemon using the nflog matcher.
  - an ebtables rule filtering all IPv4 and ARP incoming traffic by
    forwaring it to the dhcpsnooping chain, which drops packets by default.

To actually provide protection you neet to ensure that no faked dhcp acks
are copied into the daemon and that all illegal traffic actually gets dropped.
You should also ensure that the mac address cannot be spoofed to prevent faked
dhcp acks and deny of service attacks.

Roaming support:
----------------

When an STA roams around, it will generate an RTM_NEWNEIGH message when it
is first seen on the target APs bridge. This is used to query the database
for leases an add them, so the STAs doesn't need to repeat the DHCP handshake.

Attentention: This needs a kernel patch, so see patch folder until it is
applied upstream. Otherwise the AP won't learn when the STA moves from
backbone to local wlan device on the bridge.
Patch: patch/kernel/kernel-997-make-bridge-notify-switched-port-real.diff
Update 2014-09-25: c65c7a306 introduced a sufficent change for this into
                   upstream kernel. It is in 3.17-rc6 and 3.16.3 but not
		   3.14.19 at least.

Further, the dhcpsnooping daemons inform each other using UDP broadcasts about
DHCP changes, this triggers creating ebtables rules when an STA changes its IP.

Database support:
-----------------

In order for roaming to work when the source AP powers down, dhcpsnooping
caches its leases in a central SQL server (should be redundant). When
such a database is configured, incoming UDP notifications get filtered by
checking with the database list of leases.

Hostname and credentials get configured using a configuration file.

a) MySQL
  For MySQL backend, use client and dhcpsnooping group of
  /etc/mysql/fembot.cnf (configurable).
  See https://dev.mysql.com/doc/refman/5.7/en/option-files.html for details.

b) PostgreSQL >= 9.5
  For PgSQL backend, use dhcpsnooping section in /etc/pgsql/fembot.cfg
  (configurable).
  See https://www.postgresql.org/docs/9.6/static/libpq-pgservice.html for
  details.

SIGALARM triggers clearing expires entries.
SIGUSR1 triggers dumping cache tables.

ARP rewrite support:
--------------------

Additionally, ebtables rules are generated to rewrite multicast arp requests to
unicast arp requests if the destination mac is known by dhcpsnoopingd for a
local authenticated station.

This can be used to reduce multicast traffic and drop multicast arp requests
not rewritten.

VLAN support
------------

Linux kernel bridge comes with VLAN support, that is, you can finally configure
tagged and untagged VLANs per bridge port.
As DHCP is per-VLAN, dhcpsnoopingd can track DHCP and FDB state per VLAN.

This currently requires kernel and libnl patches:
  * patch/kernel:
    * kernel-997-make-nflog-add-vlan-information.patch
  * patch/libnl:
    * 01-header.patch
    * 02-nflog-vlan.patch

This needs to be enabled using --enable-vlan with configure.

ebtables example
----------------

ebtables can be disabled by using --disable-ebtables.

Packets will flow:
  PREROUTING FILTER
    -> br_forward
    -> fdb_update [sends NEWNEIGH]
    -> FORWARD_FILTER -> ...
So put your filter in ebtables FORWARDING chain.

GWMAC=00:00:00:00:00:01
DHCPMAC=00:00:00:00:00:02
BRIDGE=br*
WLAN=wlan*

ebtables -t nat -F PREROUTING
-- ARP rewrite
ebtables -t nat -N dhcpsnooping -P RETURN || true
ebtables -t nat -F dhcpsnooping
ebtables -t nat -A PREROUTING --logical-in $BRIDGE --proto arp \
         --arp-op Request -d multicast -j dhcpsnooping

ebtables -F FORWARD
-- protect DHCP MAC and GW MAC - they not in WLAN
ebtables -A FORWARD -i $WLAN --logical-in $BRIDGE -s $GWMAC -j DROP
ebtables -A FORWARD -i $WLAN --logical-in $BRIDGE -s $DHCPMAC -j DROP

-- filter multicast ARP not rewritten before going out to WLAN
ebtables -A FORWARD -o $WLAN --logical-in $BRIDGE --proto arp -d multicast -j DROP

-- IP source address filter
ebtables -N dhcpsnooping -P DROP || true
ebtables -A FORWARD -i $WLAN --logical-in $BRIDGE --proto ipv6 -j dhcpsnooping
ebtables -A FORWARD -i $WLAN --logical-in $BRIDGE --proto ipv4 -j dhcpsnooping
ebtables -A FORWARD -i $WLAN --logical-in $BRIDGE --proto arp -j dhcpsnooping

ebtables -A dhcpsnooping --proto ipv6 --proto ipv6 --ip6-source-address fe80::/64 -j RETURN
ebtables -A dhcpsnooping --proto ipv4 --proto ipv4 --ip-src-address 0.0.0.0 -j RETURN
ebtables -A dhcpsnooping --proto arp --proto arp --arp-src-address 0.0.0.0 -j RETURN

-- = send DHCPv4 and DHCPv6 and RA packets to dhcpsnoopingd =
-- DHCPv4
ebtables -A FORWARD -i $WLAN --logical-in $BRIDGE \
         --proto ipv4 --ip-protocol UDP --ip-source-port 68 --ip-destination-port 67 --nflog-group 1 -j ACCEPT
ebtables -A FORWARD -s $DHCPMAC --logical-in $BRIDGE \
         --proto ipv4 --ip-protocol UDP --ip-source-port 67 --ip-destination-port 68 --nflog-group 1 -j ACCEPT
ebtables -A FORWARD --logical-in $BRIDGE \
         --proto ipv4 --ip-protocol UDP --ip-source-port 67 --ip-destination-port 68 -j DROP
-- DHCPv6
ebtables -A FORWARD -i $WLAN --logical-in $BRIDGE \
         --proto ipv6 --ip6-protocol UDP --ip6-source-port 546 --ip6-destination-port 547 --nflog-group 1 -j ACCEPT
ebtables -A FORWARD -s $DHCPMAC --logical-in $BRIDGE \
         --proto ipv6 --ip6-protocol UDP --ip6-source-port 547 --ip6-destination-port 546 --nflog-group 1 -j ACCEPT
ebtables -A FORWARD --logical-in $BRIDGE \
         --proto ipv6 --ip6-protocol UDP --ip6-source-port 547 --ip6-destination-port 546 -j DROP
-- RA
ebtables -A FORWARD -s $GWMAC --logical-in $BRIDGE \
         --proto ipv6 --ip6-protocol ipv6-icmp --ip6-icmp-type router-advertisement --nflog-group 1 -j ACCEP
ebtables -A FORWARD --logical-in $BRIDGE \
         --proto ipv6 --ip6-protocol ipv6-icmp --ip6-icmp-type router-advertisement -j DROP


nftables example
----------------

See patch/nftables for the required patches to nft or use --nftables-legacy argument.
nftables can be disabled by using --disable-nftables.

GWMAC=00:00:00:00:00:01
DHCPMAC=00:00:00:00:00:02
BRIDGE=br*
WLAN=wlan*

nft flush ruleset bridge

nft add table bridge filter\;
nft add set bridge filter leases {type ifname . ether_addr . vlan_id . ipv4_addr  \; }
nft add set bridge filter gw {type ether_addr \; elements = { "$GWMAC" } \; }
nft add set bridge filter dhcpserver {type ether_addr \; elements = { "$DHCPMAC" } \; }
nft add chain bridge filter FORWARD { type filter hook forward priority filter\; policy accept\; }
nft add chain bridge filter dhcpsnooping

nft add table bridge nat\;
nft add map bridge nat leases {type ifname . vlan_id . ipv4_addr : ether_addr \; }
nft add chain bridge nat PREROUTING { type filter hook prerouting priority dstnat\; policy accept\; }

-- multicast ARP rewrite to unicast
--- for non-legacy mode
nft add rule bridge nat PREROUTING meta ibrname "$BRIDGE" ether daddr & 01:00:00:00:00:00 == 01:00:00:00:00:00 vlan type arp arp operation request dnat meta ibrname . vlan id . arp daddr ip map \@leases

--- for legacy mode
nft add chain bridge nat dhcpsnooping
nft add rule bridge nat PREROUTING meta ibrname "$BRIDGE" vlan type arp arp operation request ether daddr & 01:00:00:00:00:00 == 01:00:00:00:00:00 jump dhcpsnooping # multicast arp request

-- protect DHCP MAC and GW MAC - they not in WLAN
nft add rule bridge filter FORWARD iifname "$WLAN" meta ibrname "$BRIDGE" ether saddr \@gw drop
nft add rule bridge filter FORWARD iifname "$WLAN" meta ibrname "$BRIDGE" ether saddr \@dhcpserver drop

-- filter multicast ARP not rewritten before going out to WLAN
nft add rule bridge filter FORWARD oifname \@wlanif meta ibrname "brvlan" ether daddr "&" 01:00:00:00:00:00 == 01:00:00:00:00:00 vlan type arp drop

-- IP source address filter
nft add rule bridge filter FORWARD iifname "$WLAN" meta ibrname "$BRIDGE" vlan type ip jump dhcpsnooping
nft add rule bridge filter FORWARD iifname "$WLAN" meta ibrname "$BRIDGE" vlan type ip6 jump dhcpsnooping
nft add rule bridge filter FORWARD iifname "$WLAN" meta ibrname "$BRIDGE" vlan type arp jump dhcpsnooping

nft add rule bridge filter dhcpsnooping ether type vlan ip6 saddr fe80::/64 return
nft add rule bridge filter dhcpsnooping ether type vlan ip saddr 0.0.0.0 return
nft add rule bridge filter dhcpsnooping ether type vlan arp saddr ip 0.0.0.0 return

nft add rule bridge filter dhcpsnooping ether type vlan meta ibrname . vlan id . ether saddr . ip saddr \@leases return
nft add rule bridge filter dhcpsnooping counter drop

-- = send DHCPv4 and DHCPv6 and RA packets to dhcpsnoopingd =
-- DHCPv4
nft add rule bridge filter FORWARD iifname "$WLAN" meta ibrname "$BRIDGE" vlan type ip udp sport 68 udp dport 67 log group 1 accept
nft add rule bridge filter FORWARD meta ibrname "$BRIDGE" ether saddr \@dhcpserver vlan type ip udp sport 67 udp dport 68 log group 1 accept
nft add rule bridge filter FORWARD meta ibrname "$BRIDGE" vlan type ip udp sport 67 udp dport 68 counter drop
-- DHCPv6
nft add rule bridge filter FORWARD iifname "$WLAN" meta ibrname "$BRIDGE" vlan type ip6 udp sport 546 udp dport 547 log group 1 accept
nft add rule bridge filter FORWARD meta ibrname "$BRIDGE" ether saddr \@dhcpserver vlan type ip6 udp sport 547 udp dport 546 log group 1 accept
nft add rule bridge filter FORWARD meta ibrname "$BRIDGE" vlan type ip6 udp sport 547 udp dport 546 counter drop
-- RA
nft rule add bridge filter FORWARD meta ibrname "$BRIDGE" ether saddr \@gw vlan type ip6 icmpv6 type router-advertisment log 1 accept
nft rule add bridge filter FORWARD meta ibrname "$BRIDGE" vlan type ip6 icmpv6 type router-advertisment counter drop
